


                                        Modules


What is a module:

    A module is a file containing Python definitions and statements. The file name is the 'module name' with the 
    suffix '.py' appended. Within a module, the module’s name (as a string) is available as the value of the global
    'variable __name__.'

    Example: Acces functions from different files using modules

        > Create a file named 'fibo.py'
        > Write the following code in it:

            def fib(n):    # write Fibonacci series up to n
                a, b = 0, 1
                while a < n:
                    print(a, end=' ')
                    a, b = b, a+b
                print()

            def fib2(n):   # return Fibonacci series up to n
                result = []
                a, b = 0, 1
                while a < n:
                    result.append(a)
                    a, b = b, a+b
                return result

        > Create a file named 'main.py'
        > Write the following code to acces the informatin from 'fibo.py'

                import fibo             # Needed to get connecte both files

                fibo.fib(1000)          output: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987

                fibo.fib2(100)          output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

                fibo.__name__           output: 'fibo'
                    # This ouputs the name of the module, which is 'fibo'

        > If you intend to use a function often you can assign it to a local name:

                fib = fibo.fib
                fib(500)







More Modules, Modules:


     - Previously i mentioned that if you intend to use a function often you can assign it to a local name:

            fib = fibo.fib
            fib(500)

            - We can also do this be importing the name form a module direclty into the importing module name space
                This does not introduce the module name from which the imports are taken in the local namespace
                
                    Example:   only imports the functions 'fib' and 'fib2' in the file 'fibo'

                                from fibo import fib, fib2
                                    fib(500)
                                    fib2(14)


            - There is even a variant to import all names that a module defines:

                    Example:    imports every functions in the file 'fibo' 
                                
                                from fibo import *
                                    # can call any function


     - We change the name of called modules, If the module name is followed by as, then the name following as is bound directly to the 
        imported module.

            Example: 
                        from import fibo as fib      # This renames the imported module from 'fibo' to 'fib' changes will only appear in 
                            fib.fib(300)                the files its being cahgned, it we can call the 'fibo' in other files with the name 'fibo'







Executing Modules as a script, Modules:
     
        When you run a Python module with, the code in the module will be executed, just as if you imported it, but with the __name__ set 
        to "__main__". That means that by adding this code at the end of your module

            Example: Allows use to run pythong codes from the command line

                > code: 
                            if __name__ == "__main__":
                            import sys
                            fib(int(sys.argv[1])) 

                    > Command Line Example: 

                            python fibo.py 50                       output: 0 1 1 2 3 5 8 13 21 34


                    > you wont be able to imoriot the fies after runnig it. 








Modules search path, Modules:

    # The order with which modules search for a specified file across the system.

        1 - First searches for a built-in module with that name, these module names are listed in sys.builtin_module_names.
        2 - It then searches for a file named spam.py in a list of directories given by the variable sys.path. sys.path
    







Standard Modules, Modules:                                                                                                                                                                                                                                                                                                  
    Modules that are build into or that is partg of python.

        Example:
            Python comes with a library of standard modules, described in a separate document, the Python Library Reference (“Library Reference” hereafter). Some modules are built into the interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, either for efficiency or to provide access to operating system primitives such as system calls. The set of such modules is a configuration option which also depends on the underlying platform. For example, the winreg module is only provided on Windows systems. One particular module deserves some attention: sys, which is built into every Python interpreter. The variables sys.ps1 and sys.ps2 define the strings used as primary and secondary prompts:

                import sys
                sys.ps1

                sys.ps1 = 'C> '
                                    output:
                                            C> print('Yuck!')
                                            Yuck!





dir() Funciton, Modules:

    - The built-in function dir() is used to find out which names a module defines. It returns a sorted list of strings.

    - Outputs a list of all the functions names in a specific modules

    Example:

            import fibo, sys

            dir(fibo)
            ['__name__', 'fib', 'fib2']






