#Pushing to github: git push origin main





IF Statement|--------------------------------------------------------------------------------------------

print("Topic: If Statement")
# If statements,   nonensical stuff for real hahhaahhaa.

val  = 0 # int(input("Enter an integer")) # prommpt a user to enter an int value 
if val < 0:
    val = 0
    print("Negative: we changed it to zero")
elif val == 0:
    print("value is equal to 0 good")
elif val == 1:
    print("val is equal to 1 hahahaha")
else:
    print("moore value good man sir")






For Loops|--------------------------------------------------------------------------------------------

print("Topic: For Loops")
#Time to learn for loops, goated loops FR

wordList = ['car', 'yomama', 'holaista', 'pupisto', 'holala']
for i in wordList:
    print(i, len(i))    # ouputs the words, and its characters counts





Collections|--------------------------------------------------------------------------------------------

print("Topic: Collection")
#Collections: No idea what this is, but it sees interestting. 

users = {'Hans': 'inactive', 'Eleonore': 'active', 'Karl': 'active'}
    # it seems like a collections is a list with every value in the list having 
    # set of items of thier own or something of that regards.

# It seems like we are going through every value in the list and getting a coper of
# thier 'items' using - users.copy().items()
for user, status in users.copy().items(): 
    if status == 'inactive':
        del users[user]             # Delete the users from the lists

#Create a new collection, and only tranfer value that are acitve
active_users = {}
for user, status in users.items():   # we are modifying teh actual list and not a copy of it
    if status == 'active':
        active_users[user] = status  # Tranfers the value and its item to the new list





Range|--------------------------------------------------------------------------------------------

print("Topic: Range")
# 'Range()' Function, I also have no idea as to what this does but lets learn!!!

for i in range(5):          # Range generate an arithmetic progression of a number ex: 5: 0 1 2 3 4
    print(i)

#Range: Steps - specifying the increments of the range
list(range(5, 10))          # Creates a list and add the values between 5 to 10 in it
print()
list(range(0, 10, 2))       # Creates a lits and add the values between 0 to 10 in an increment of 2
print()
list(range(-10, -100, -30)) # Creata a lists and add the values between -10 to -100 in an increment of -30


words = ['Mary', 'had', 'a', 'little', 'lamb']
for i in range(len(words)):
    print(i, words[i])







Brea/continue|--------------------------------------------------------------------------------------------

print("Topic: Break and Conitnue")
# 'break' statemetn breaks out of the innermosts enclosing while loop and for loop
for out in range(2, 10):
    for inner in range(2, out):
        if out % inner == 0:
            print(" x is equal to n")
            break

# continue end the current iterations and skips to the next iteration of the loop
for num in range(2, 10):
    if num % 2 == 0:
        print("even numbers: continue")
        continue






While Loops|--------------------------------------------------------------------------------------------

print("Topic: Else statement for While/For Loops")
# We can have an else statement that execute after each iteration of the for/while loop running
# Does not work if the loop was terminated by a break, or return statement

for outter in range(2, 10):
    for innner in range(2, outter):
        if outter % inner == 0:
            print("outter: This is not a prime " + str(outter))
    else:
        print(outter, " is a prime number")





Pass Statement|--------------------------------------------------------------------------------------------

print("Topic: Pass Statements")
# Generally does nothing, can be used wehn a statement is requrie syntactycally

#while True:     # Will go on running forever until  
   # pass








Match/Switch Statement|--------------------------------------------------------------------------------------------

print("Topic: Match/Switch Statement")
# A matarch statement that take an experssion an dcompre its value to sucessive 
# pattern a sone or more bloocks

def checkError(status):
    match status:
        case 201:
            return 'Its all oh ok' 
        case 404:
            return "Not Found" 
        case 418:
            return "I am a tea pot"
        case _: # defaul statement
            return "Hey memo, check internet insted"      




print()
print("Match/Switch Statement -: If Clause/Guards")
# Add an 'if clause' to a pattern, also reffered as the guard. If the guard is false, match gos on to try the next
# case block. 

class Point: 
    __match_args__ = ('x', 'y')         # argument passed to a fucntion it seems
    def __init__ (self, x, y):
        self.x = x
        self.y = y

#Normal
match points:       
    case []:                            # print nothing if the list is empty
        print("No Points")
    case [Point(0, 0)]:                 # print "origine" if coordiante are (0,0)
        print("The Origine")
    case [Point(x, y)]:
        print(f"Single points {x}, {y}")
    case [Point(x, y)]:
        print(f"prints the outputted points")
    case [Point(0, y1), Point(0, y2)]:
    #case _:
    #    print("nothin to be outputted")







Match/Switch Statement w/ if statements|--------------------------------------------------------------------------------------------

# with If satement or guards
match point:
    case Point(x, y) if x == y:         # This if statement only works if the guard all day, 








Match/Switch Statement Statement w/ Emurates|--------------------------------------------------------------------------------------------

#making a user of Emurates with switch statements
from enum import enumerate                  # Need in order to make use of emurate in python

class color(Enum):                          # Instantiated a set of 3 emurators 
    GREEN = 'green'   
    RED = 'red'
    BLUE = 'blue'
                                            # Which ever user chooses, will be associated with an emu
color = Color(input("Enter your choice of 'red', 'blue' or 'green': "))         
        
match color:
    case color.RED:                     
        print("red was found in the list")  # Print this message if the user choose RED
    case color.GREEN:
        print("Gras ia green for use")      # Print this message if the user choose RED
    case color.BLUE:
        print("The sky is blue today")      # Print this message if the user choose RED
        





Functions |--------------------------------------------------------------------------------------------

# Fibonaccia function implemeted in java
def fib(n):                 
    a, b = 0, 1
    while a < n:
        print(a, end =' ')
        a, b = b, a + B
    print()

fib(4) # call function


# Functions with arguments passed to it
def askIfok






Different ways of calling a function |----------------------------------------------------------------
def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")

# Function Calls
    parrot()                     
    parrot(voltage=5.0, 'dead')  
    parrot(110, voltage=220)     
    parrot(actor='John Cleese')





# Keyword-Only arguments

1 -  def standard_arg(arg):
        print(arg)

2 -    def pos_only_arg(arg, /):
        print(arg)

3 -    def kwd_only_arg(*, arg):
        print(arg)

4 -    def combined_example(pos_only, /, standard, *, kwd_only):
        print(pos_only, standard, kwd_only)


The first function definitioan 'standard_arg, place no restrictin on the 
calling convention and argument may b epassed by position or keyword

Example: 
    standard_arg(2)     output: 2
    standard_arg(arg=2) output: 2

The second function 'pos_only_arg' is restricted to only use positional parameter 
as there is '/' in the function definitioan. only use numbers

Example:
    pos_only_arg(1)     output: 1
    pos_only_arg(arg=1) output: error 

The third function 'kwd_only_arg' only allows keyword argument as indicated by a '*'
in the funciton definition

Example:
    kwd_only_arg(3)      output: error
    kwd_only_arg(arg=3)  output: 3

The last function uses all the three calling conventione din the same function definitions
Example:
    combined_example(1, 2, 3)                           output: error
    combined_example(1, 2, kwd_only=3)                  output: 1 2 3

combined_example(1, standard=2, kwd_only=3)             output: 1 2 3

combined_example(pos_only=1, standard=2, kwd_only=3)    output: error


            Functin Operators |--------------------------------------------------------------------------------------------
                *(_args_) - The * operator before args tells Python to pack all the additional positional arguments into a tuple named args.
                This means you can pass as many arguments as you want, and they will be accessible inside the function as a tuple

                sep = "/" _ Specified which value you r are going to put inbdetwen each worfs for 




# There is no possible call that will make it return True as the keyword 'name' will always bind to the first parameter. For example:

    foo(1, **{'name': 2})
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: foo() got multiple values for argument 'name'

foo(1, **{'name': 2}) : error # This is not serious


Better Implementation:
    def foo(name, /, **kwds):
        return 'name' in kwds

    foo(1, **{'name': 2})
    True




# Arbitrary Argument Lists |--------------------------------------------------------------------------------------------

A function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple (see Tuples and Sequences). 
Before the variable number of arguments, zero or more normal arguments may occur.

def write_multiItems(file, seperator, *args):
    file.write(seperator.join(args))                # It seems like the program gets the information from the seperator and write it in file



Any formal parameters which occur after the *args parameter are ‘keyword-only’ arguments, meaning that they can only be used as keywords
rather than positional arguments.

concat (*args, sep="/")
    return sep.join(args)

concat("earth", "mars", "venus")
concat("earth", "mars", "venus", sep=".")





# Unpacking Argumetn Lists Argument Lists |--------------------------------------------------------------------------------------------



Function Annatations |--------------------------------------------------------------------------------------------

# Print an anottio of the ouputs of the program, show how the ouput look like and demonstrate how the program
goes through the function

Example:
    def f(ham: str, eggs: str = 'eggs') -> str:
        print("Annotations:", f.__annotations__)
        print("Arguments:", ham, eggs)
        return ham + ' and ' + eggs

    f('spam')
    Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}
    Arguments: spam eggs
    'spam and eggs'