
                                                        Data Structures


Lists Data Structures:

    list.append(x) - Adds an item to the end of the list, Similar to how 'a(len(array):) = [x]'


    list.extend(iterable) - Extend the list by appending all the items from the iterable. Similar to 'a[len(a):] = iterable', 
                                adds elements by going through the value: iterable and adding every value in it into the list
    

    list.inset(i, x) - Insert an item at a given position. The first argument is the index of the element before which to insert,
                         so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).


    list.remove(x) - Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item.


    list.pop([i]) - Remove the item at the given position in the list, and return it. 
                  - If no index is specified, a.pop() removes and returns the last item in the list. 
                  It raises an IndexError if the list is empty or the index is outside the list range.


    list.clear() - Remove all items from the list. Similar to 'del a[:]'


    list.index(x[, start[, end]]) - Return zero-based index in the list of the first item whose value is equal to x.
                                     Raises a ValueError if there is no such item.
                                  - The optional arguments start and end are interpreted as in the slice notation and 
                                    are used to limit the search to a particular subsequence of the list. 


    list.count(x) - Return the number of times x appears in the list.


    list.sort(*, key=None, reverse=False) - Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).


    list.reverse() - Reverse the elements of the list in place.


    list.copy() - Returns a shallow copy of the list, similar to 'a[:]'






Stack, List Data Structures:

    The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved 
    (“last-in, first-out”). To add an item to the top of the stack, use append(). To retrieve an item from the top of the 
    stack, use pop() without an explicit index. 

    Example:

        stack = [3, 4, 5]
        stack.append(6)
        stack.append(8)
                output: [3, 4, 5, 6, 8]

        stack.pop()
                ouput: 8








Queue, List Data Structures:

    To implement a queue, use collections.deque which was designed to have fast appends and pops from both ends. 

    Example:

        from collections import deque

        queue = deque(["Eric", "John", "Michael"])
        queue.append("Terry")           # Terry arrives
        queue.append("Graham")          # Graham arrives
                    output: ([Eric, John, Michael, Terry, Graham])

        queue.popleft()                 # Pop from the left instead of the right
                    output: ([John, Michael, Terry, Graham])










List Comprehensions, 1 Line of code for looping Functions:

    Having one line of code be written to do what would usually takle about 3 - 9 lines of code

    Exmaple - 1:
        squares = []
        for x in range(10):
            squares.append(x**2)

        > List Comprehensions: squares = list(map(lambda x: x**2, range(10)))



    Example - 2:
        combs = []
        for x in [1,2,3]:
            for y in [3,1,4]:
                if x != y:
                    combs.append((x, y))

        > List Comprehensions: [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]



    Example - 3:
        from math import pi 

        > [str(round(pi, i)) for i in range(1, 6)]









Nested List Comprehensions, 1 Line of code for looping Functions:

    Example:                        # Going through a matrix
        matrix = [[1,2,3,4], 
                 [5,6,7,8], 
                 [9, 10, 11, 12]]


        > output: [[row[i] for row in matrix] for i in range(4)]
                    - Go throug every row,
                    - Go through every value in each row and the value at that tht index


    Example:                        # Adding values in a list matrix

        for i in range(4):
        # the following 3 lines implement the nested listcomp
        transposed_row = []
        for row in matrix:
            transposed_row.append(row[i])
        transposed.append(transposed_row)


        1-Lin:

        transpose = []
        for i in range(4):
            transpose.append([row[i] for row in matrix])
        
                    output: [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]









The Del Statement, Data Structures:

    There is a way to remove an item from a list given its index instead of its value: the del statement. This differs 
    from the pop() method which returns a value. The del statement can also be used to remove slices from a list or 
    clear the entire list

    Examples:
        a = [-1, 1, 66.25, 333, 333, 1234.5]   
            del a[0]                            # delete value at index 'a[0]'

            del a[2:4]                          # delete values from index 'a[2]' to 'a[4]'

            del a[:] or del a                   # delete the entire list








Tuple and Sequence, Data Structures:

    A tuple consists of a number of value separateed by commas, and enclosed in parenthesis

    t = 12345, 54321, 'hello'           # This is a tuple
    t[0]                                # Outpute the value at index[0]

    u = t, (1, 2, 3, 4, 5)              # This is a nested tuple    
                                        # output or u: ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))

    t[0] = 8888         # Error: this wont work values in tuple cannot be changes


A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks 
to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is 
constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses).

    Example:
        empty = ()
        singleton = 'hello',    # <-- note trailing comma, This makes it a tuple of length 1 or a tuple with 1 value

        len(empty)                  Output: 0
        len(singleton)              output: 1

    







Set, Data Structures:

    Python also includes a data type for sets. A set is an unordered collection with no duplicate elements. 
    Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical 
    operations like union, intersection, difference, and symmetric difference. (Similar to HashSet in Java)

    Example:
        basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}

        'orange' in basket                          # Return True
        'crabgrass' in basket                       # Return False

    Example:
        a = set('abracadabra')
        b = set('alacazam')

        a > {'a', 'r', 'b', 'c', 'd'}                       # unique letters in a

        a - b > {'r', 'd', 'b'}                             # letters in a but not in b

        a | b > {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}    # letters in a or b or both

        a & b > {'a', 'c'}                                  # letters in both a and b

        a ^ b > {'r', 'd', 'b', 'm', 'z', 'l'}              # letters in a or b but not both








Dictionaries, Data Structures:

    Another useful data type built into Python is the dictionary (see Mapping Types — dict). Dictionaries are sometimes found in other 
    languages as “associative memories” or “associative arrays”. Unlike sequences, which are indexed by a range of numbers, dictionaries 
    are indexed by keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they 
    contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a
    key. You can’t use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like 
    append() and extend().

    Example:

        tel = {'jack': 4098, 'sape': 4139}

        tel['guido'] = 4127             output: {'jack': 4098, 'sape': 4139, 'guido': 4127}

        tel['jack']                     output: 4098
        
        del tel['sape']
        tel['irv'] = 4127               output: {'jack': 4098, 'guido': 4127, 'irv': 4127}
        
        list(tel)                       output: ['jack', 'guido', 'irv']
        
        sorted(tel)                     output: ['guido', 'irv', 'jack']

        'guido' in tel                  output: True

            

    1-Line Dictionaries calls:
        dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])          output: {'sape': 4139, 'guido': 4127, 'jack': 4098}








Looping techniques, Data Structrues:

    Looping through dictionaries - When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the items() method.

    Example: 
        knights = {'gallahad': 'the pure', 'robin': 'the brave'}
        for k, v in knights.items():
            print(k, v)
                                        output: gallahad the pure           # ouputs both the key and the values
                                                robin the brave



    When looping we can make use of 'enumerate()' function to get the position index and teh corresponding values
        for i, v in enumerate(['tic', 'tac', 'toe']):
            print(i, v)




    using zip()  to loop over 2 list at the same time - To loop over two or more sequences at the same time, the entries can be paired with the zip() function.

        questions = ['name', 'quest', 'favorite color']
        answers = ['lancelot', 'the holy grail', 'blue']

        for q, a in zip(questions, answers):                                    # .zip() goes through both lists in pairs of 2s
            print('What is your {0}?  It is {1}.'.format(q, a))                 # .format(q, a), specifies that q = 0, and a = 1

        output: 
            What is your name?  It is lancelot.
            What is your quest?  It is the holy grail.
            What is your favorite color?  It is blue.





    Loop over a sequence in reverse: reverse()

    Example:
        for i in reverse(range(1, 10, 2)):
            print(i)

                output: 9 7 5 3 1

    


    To loop over a sequence in sorted order: us the sorted()

    Example: List
        basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
        for i in sorted(basket):
            print(i)

                output: apple apple banana orange orange pear


    Example: Set
            basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
            for f in sorted(set(basket)):                                           # specifies that its a set
                print(i)

                    output: apple apple banana orange orange pear








